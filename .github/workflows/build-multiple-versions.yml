name: Build multiple versions of Julia within one environment

on: [push, pull_request, workflow_dispatch]

# Define environment variables as shortcuts for both refs.
# This is not strictly needed but it makes the workflows easier to edit and copy.
env:
  REF1: "v1.5.3"
  REF2: "v1.5.1"

# Build two versions of Julia in parallel and upload them as Job artifacts.
# This allows reusing the same cache across all builds while extracting it to different target directories.
# It also speeds up the build by not building all versions in series.

jobs:
  build1:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: true
      matrix:
        julia-ref: [v1.5.3]

    outputs:
      ref: ${{ matrix.julia-ref }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache
        id: cache-julia
        uses: actions/cache@v2
        with:
          path: ~/julia
          # Note that this cache key will not work with branches
          # because there could be new commits after the cache has been created
          key: ${{ runner.os }}-${{ matrix.julia-ref }}

      - name: Build Julia
        if: steps.cache-julia.outputs.cache-hit != 'true'
        uses: ./
        with:
          ref: ${{ matrix.julia-ref }}

      - name: Show versioninfo()
        run: ~/julia/julia -e "using InteractiveUtils; versioninfo()"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: julia-${{ matrix.julia-ref }}
          path: ~/julia

  build2:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: true
      matrix:
        julia-ref: [v1.5.1]

    outputs:
      ref: ${{ matrix.julia-ref }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache
        id: cache-julia
        uses: actions/cache@v2
        with:
          path: ~/julia
          # Note that this cache key will not work with branches
          # because there could be new commits after the cache has been created
          key: ${{ runner.os }}-${{ matrix.julia-ref }}

      - name: Build Julia
        if: steps.cache-julia.outputs.cache-hit != 'true'
        uses: ./
        with:
          ref: ${{ matrix.julia-ref }}

      - name: Show versioninfo()
        run: ~/julia/julia -e "using InteractiveUtils; versioninfo()"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: julia-${{ matrix.julia-ref }}
          path: ~/julia

      - name: Set ref output for dependent jobs
        run: echo "::set-output name=ref::${{ matrix.julia-ref }}"

  ci:
    runs-on: ubuntu-20.04

    # Wait until build1 and build2 have finished
    needs: [build1, build2]

    steps:
      - name: Download Julia ${{ needs.build1.outputs.ref }}
        uses: actions/download-artifact@v2
        with:
          name: julia-${{ needs.build1.outputs.ref }}
          path: ~/julia-${{ needs.build1.outputs.ref }}

      - name: Download Julia ${{ needs.build2.outputs.ref }}
        uses: actions/download-artifact@v2
        with:
          name: julia-${{ needs.build2.outputs.ref }}
          path: ~/julia-${{ needs.build2.outputs.ref }}

      - name: Show versioninfo()
        run: |
          ~/julia-${{ needs.build1.outputs.ref }}/julia -e "using InteractiveUtils; versioninfo()"
          ~/julia-${{ needs.build2.outputs.ref }}/julia -e "using InteractiveUtils; versioninfo()"
